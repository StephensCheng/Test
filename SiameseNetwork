import torch.nn as nn

# 定制双塔的CNN网络
"""
class SiameseNetwork(nn.Module):
    def __init__(self):
        super(SiameseNetwork, self).__init__()
        表示继承nn.Module()定制相应的CNN网络
"""


class SiameseNetwork(nn.Module):
    def __init__(self):
        super(SiameseNetwork, self).__init__()
        self.cnn1 = nn.Sequential(
            nn.ReflectionPad2d(1),
            # ReflectionPad2d 是paddingLayer，
            # padding的方式多种，可以是指定一个值，也可以是不规则方式，即给出一个四元组
            nn.Conv2d(1, 4, kernel_size=3),   #1表示输入通道，4表示输出通道
            nn.ReLU(inplace=True),
            #nn.BatchNorm2d(4),其中4表示归一化的参数的选择，期望输入的特征数
            nn.BatchNorm2d(4),
            nn.Dropout2d(p=.2),

            nn.ReflectionPad2d(1),
            nn.Conv2d(4, 8, kernel_size=3),  #4表示输入通道
            nn.ReLU(inplace=True),
            nn.BatchNorm2d(8),
            nn.Dropout2d(p=.2),

            nn.ReflectionPad2d(1),
            nn.Conv2d(8, 8, kernel_size=3),
            nn.ReLU(inplace=True),
            nn.BatchNorm2d(8),
            nn.Dropout2d(p=.2),
        )

        self.fc1 = nn.Sequential(
            nn.Linear(8 * 100 * 100, 500),
            #in_features - 每个输入样本的大小
            # out_features - 每个输出样本的大小
            nn.ReLU(inplace=True),

            nn.Linear(500, 500),
            nn.ReLU(inplace=True),

            nn.Linear(500, 5)
        )

    def forward_once(self, x):
        output = self.cnn1(x)
        """
        一般出现在model类的forward函数中，具体位置一般都是在调用分类器之前。分类器是一个简单的nn.Linear()结构，
        输入输出都是维度为一的值，x = x.view(x.size(0), -1) 
        这句话的出现就是为了将前面多维度的tensor展平成一维。
        """
        output = output.view(output.size()[0], -1)
        output = self.fc1(output)
        return output

    def forward(self, input1, input2):
        output1 = self.forward_once(input1)  # 这里有一个嵌套的函数因为有两个图片的输入input1，input2
        output2 = self.forward_once(input2)
        return output1, output2
